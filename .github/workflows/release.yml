name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v3

      - name: Extract version from tag
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Update version in gradle.properties
        run: |
          # Update version while preserving other properties
          sed -i "s/version=.*/version=${{ steps.extract_version.outputs.version }}/" plugin/gradle.properties
          echo "Updated gradle.properties:"
          cat plugin/gradle.properties

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build and test
        run: ./gradlew plugin:build plugin:test --no-daemon --stacktrace

      - name: Validate plugin
        run: ./gradlew plugin:validatePlugin --no-daemon

      - name: Publish to Gradle Plugin Portal (Dry Run)
        if: contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc')
        run: ./gradlew plugin:publishPlugins --dry-run --no-daemon
        env:
          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}

      - name: Publish to Gradle Plugin Portal
        if: "!contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')"
        run: ./gradlew plugin:publishPlugins --no-daemon
        env:
          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous release tag
          PREVIOUS_TAG=$(git tag -l "v*" --sort=-version:refname | grep -v "^${GITHUB_REF#refs/tags/}$" | head -n1)
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous release found, showing all commits"
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "Generating changelog from $PREVIOUS_TAG to ${{ steps.extract_version.outputs.version }}"
          
          # Generate changelog from commits
          CHANGELOG=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD | grep -E '^- (feat|fix|refactor|docs|test|chore|perf)' | head -20)
          
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- Initial release"
          fi
          
          # Save changelog to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes in ${{ steps.extract_version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...v${{ steps.extract_version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          body: ${{ steps.changelog.outputs.changelog }}