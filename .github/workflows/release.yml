name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v3

      - name: Extract version from tag
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Update version in gradle.properties
        run: |
          # Update version while preserving other properties
          sed -i "s/version=.*/version=${{ steps.extract_version.outputs.version }}/" plugin/gradle.properties
          echo "Updated gradle.properties:"
          cat plugin/gradle.properties

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build and test
        run: ./gradlew plugin:build plugin:test --no-daemon --stacktrace

      - name: Validate plugin
        run: ./gradlew plugin:validatePlugin --no-daemon

      - name: Publish to Gradle Plugin Portal (Dry Run)
        if: contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc')
        run: ./gradlew plugin:publishPlugins --dry-run --no-daemon
        env:
          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}

      - name: Publish to Gradle Plugin Portal
        if: "!contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')"
        run: ./gradlew plugin:publishPlugins --no-daemon
        env:
          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}

      - name: Update CHANGELOG.md
        run: |
          chmod +x scripts/update-changelog.sh
          ./scripts/update-changelog.sh ${{ steps.extract_version.outputs.version }}
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Commit updated changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: update changelog for v${{ steps.extract_version.outputs.version }}" || echo "No changes to commit"

      - name: Generate release notes from changelog
        id: changelog
        run: |
          # Extract the content between the new version header and the next version/section
          VERSION="${{ steps.extract_version.outputs.version }}"

          # Get the release notes from the updated CHANGELOG.md
          RELEASE_NOTES=$(awk -v version="$VERSION" '
            BEGIN { in_section = 0; content = "" }
            /^## \[v/ {
              if (in_section) exit
              if ($0 ~ "\\[v" version "\\]") {
                in_section = 1
                next
              }
            }
            /^## / && in_section { exit }
            in_section && !/^## / {
              if (content != "") content = content "\n"
              content = content $0
            }
            END { print content }
          ' CHANGELOG.md)

          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="Release v$VERSION - see CHANGELOG.md for details"
          fi

          # Save to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## Release v$VERSION" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          body: ${{ steps.changelog.outputs.changelog }}