plugins {
    id 'java'
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.spring.dependency.management)
    alias(libs.plugins.openapi.generator)
    id 'com.guidedbyte.openapi-modelgen'
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    // Spring Boot web dependencies
    implementation libs.bundles.test.app.web
    
    // OpenAPI/Swagger v3 annotations (includes @Schema)  
    implementation libs.swagger.annotations
    
    // Annotation processing dependencies
    compileOnly libs.bundles.test.app.annotations
    annotationProcessor libs.lombok
    
    // Jakarta Bean Validation
    implementation libs.bundles.test.app.validation
    
    // Spring Nullable annotations
    implementation libs.spring.core
    
    // OpenAPI Generator dependency for plugin  
    implementation libs.openapi.generator
    
    // Test dependencies
    testImplementation libs.spring.boot.starter.test
    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok
}

// Configure our custom plugin
openapiModelgen {
    debug true  // Disable debug logging for template resolution
    
    defaults {
        userTemplateDir "src/main/templates" // Use explicit user templates
        userTemplateCustomizationsDir "src/main/templateCustomizations" // Use user YAML customizations
        modelNamePrefix "Api" // Add prefix to test the new feature
        saveOriginalTemplates true // Enable saving original templates
//        templateSources([
//            'user-templates',           // Use explicit user templates first
//            'user-customizations',      // Then user YAML customizations
//            // Exclude 'plugin-customizations' to test user precedence
//            'openapi-generator'         // Fallback to OpenAPI Generator defaults
//        ])
        
        templateVariables([
                header: "Copyright (c) {{currentYear}} GuidedByte Technologies Inc."
        ])
        // NOTE: importMappings and typeMappings commented out due to OpenAPI Generator bug
        // When using modelNamePrefix/Suffix, these mappings don't work correctly
        // See: https://github.com/OpenAPITools/openapi-generator/issues/19043
        // importMappings([
        //     'UUID': 'java.util.UUID',
        //     'LocalDate': 'java.time.LocalDate',
        //     'LocalDateTime': 'java.time.LocalDateTime',
        //     'BigDecimal': 'java.math.BigDecimal'
        // ])
        // typeMappings([
        //     'string+uuid': 'UUID',
        //     'string+date': 'LocalDate',
        //     'string+date-time': 'LocalDateTime'
        // ])
        additionalProperties([
            'library': 'spring-boot',
            'beanValidations': 'true',
            'performBeanValidation': 'true',
            'useSpringBoot3': 'true',
            'jackson': 'true'
        ])
        // OpenAPI Normalizer rules to transform specifications before generation
        // openapiNormalizer([
        //     'REFACTOR_ALLOF_WITH_PROPERTIES_ONLY': 'true',  // Simplify allOf schemas
        //     'SIMPLIFY_ONEOF_ANYOF': 'true',                 // Simplify oneOf/anyOf schemas
        //     'KEEP_ONLY_FIRST_TAG_IN_OPERATION': 'true'      // Keep only first tag per operation
        // ])
        validateSpec false
        configOptions([
            additionalModelTypeAnnotations: "@jakarta.validation.Valid" // User controls annotations, no plugin defaults
        ])
    }
    specs {
        pets {
            inputSpec "$projectDir/src/main/resources/openapi/pets.yaml"
            modelPackage "com.guidedbyte.testapp.model.pets"
        }
        
        orders {
            inputSpec "$projectDir/src/main/resources/openapi/orders.yaml"
            modelPackage "com.guidedbyte.testapp.model.orders"
            modelNamePrefix "Custom" // Override default prefix for orders
            modelNameSuffix "Entity" // Override suffix for orders to demonstrate per-spec config
            // NOTE: importMappings and typeMappings commented out due to OpenAPI Generator bug
            // When using modelNamePrefix/Suffix, these mappings don't work correctly
            // importMappings([
            //     'Instant': 'java.time.Instant'  // Additional import for orders only
            // ])
            // typeMappings([
            //     'string+date-time': 'Instant'   // Override default mapping for orders
            // ])
            additionalProperties([
                'reactive': 'false',            // Override reactive setting for orders
                'enablePostProcessFile': 'true', // Orders-specific additional property
                'jackson': 'true'
            ])
            // Spec-specific normalizer rules (override/extend defaults)
            // openapiNormalizer([
            //     'SIMPLIFY_ONEOF_ANYOF': 'false',            // Override default setting
            //     'SET_TAGS_FOR_ALL_OPERATIONS': 'orders'     // Orders-specific rule
            // ])
        }
    }
}

// Add generated sources to compilation
sourceSets {
    main {
        java {
            srcDirs += file("${layout.buildDirectory.get()}/generated/sources/openapi/src/main/java")
        }
    }
}

tasks.register('listPluginVersions') {
    doLast {
        println "Applied Gradle Plugin Versions:"
        project.plugins.each { plugin ->
            def pluginClass = plugin.class
            def pluginName = pluginClass.simpleName
            def version = "Unknown"

            // Attempt to find version information from the plugin's JAR
            def jarFile = pluginClass.protectionDomain?.codeSource?.location?.file
            if (jarFile) {
                def matcher = (jarFile =~ /-(\d+\.\d+(\.\d+)?(-\w+)?)\.jar$/) // Matches versions like 1.0, 1.2.3, 1.0-SNAPSHOT
                if (matcher.find()) {
                    version = matcher.group(1)
                }
            }
            println "  - $pluginName: $version"
        }
    }
}

// Ensure DTOs are generated before compilation
afterEvaluate {
    compileJava.dependsOn generateAllModels
}