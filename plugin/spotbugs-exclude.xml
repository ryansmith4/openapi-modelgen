<?xml version="1.0" encoding="UTF-8"?>
<FindBugsFilter>
    <!-- Exclude test classes from certain checks -->
    <Match>
        <Class name="~.*Test.*"/>
        <Bug pattern="RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT"/>
    </Match>
    
    <!-- Exclude generated code -->
    <Match>
        <Package name="~.*\.generated\..*"/>
    </Match>
    
    <!-- Exclude specific false positives for Gradle plugin development -->
    <Match>
        <Class name="com.guidedbyte.openapi.modelgen.OpenApiModelGenPlugin"/>
        <Method name="apply"/>
        <Bug pattern="NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE"/>
    </Match>
    
    <!-- Exclude serialization warnings for configuration cache compatible classes -->
    <Match>
        <Bug pattern="SE_BAD_FIELD"/>
        <Or>
            <Class name="~.*Action.*"/>
            <Class name="~.*TemplateConfiguration"/>
            <Class name="~.*ResolvedSpecConfig"/>
        </Or>
    </Match>
    
    <!-- Exclude warnings about static loggers in serializable classes (required for config cache) -->
    <Match>
        <Bug pattern="SE_BAD_FIELD_INNER_CLASS"/>
    </Match>
    
    <!-- Exclude performance warnings for test utilities -->
    <Match>
        <Class name="~.*Test.*"/>
        <Bug pattern="DM_STRING_CTOR"/>
    </Match>
    
    <!-- Exclude warnings about method naming conventions in DSL classes -->
    <Match>
        <Or>
            <Class name="com.guidedbyte.openapi.modelgen.DefaultConfig"/>
            <Class name="com.guidedbyte.openapi.modelgen.SpecConfig"/>
            <Class name="com.guidedbyte.openapi.modelgen.OpenApiModelGenExtension"/>
        </Or>
        <Bug pattern="NM_METHOD_NAMING_CONVENTION"/>
    </Match>
    
    <!-- Exclude EI_EXPOSE_REP warnings for YAML configuration objects -->
    <!-- These classes are designed for YAML deserialization with SnakeYAML library.
         Setter methods intentionally store references directly (standard YAML/JSON binding pattern).
         Getter methods return defensive copies via Collections.unmodifiableList/Map where appropriate.
         Objects are effectively immutable after deserialization phase. -->
    <Match>
        <Package name="com.guidedbyte.openapi.modelgen.customization"/>
        <Or>
            <Bug pattern="EI_EXPOSE_REP"/>
            <Bug pattern="EI_EXPOSE_REP2"/>
        </Or>
    </Match>
    
    <!-- Exclude EI_EXPOSE_REP warnings for service context objects -->
    <!-- These are internal context/configuration objects with controlled usage patterns.
         They are designed as data transfer objects within the plugin's internal architecture
         where defensive copying would harm performance without security benefits. -->
    <Match>
        <Or>
            <Class name="~.*\.services\..*"/>
            <Class name="~.*\.customization\..*"/>
        </Or>
        <Or>
            <Bug pattern="EI_EXPOSE_REP"/>
            <Bug pattern="EI_EXPOSE_REP2"/>
        </Or>
    </Match>
    
    <!-- Exclude REC_CATCH_EXCEPTION in defensive parsing and error handling scenarios -->
    <!-- These methods need to catch generic Exception for robust error handling:
         - Version parsing may throw various exceptions from different libraries
         - Template processing needs to handle any runtime errors gracefully
         - Logging operations should never fail the build process
         - Plugin configuration must be fault-tolerant -->
    <Match>
        <Or>
            <Class name="com.guidedbyte.openapi.modelgen.OpenApiModelGenPlugin"/>
            <Class name="~.*\.services\..*"/>
            <Class name="~.*\.logging\..*"/>
        </Or>
        <Bug pattern="REC_CATCH_EXCEPTION"/>
    </Match>
    
    <!-- Exclude constructor throw warnings for utility classes that prevent instantiation -->
    <!-- Standard pattern for utility/constants classes to prevent instantiation via private constructor -->
    <Match>
        <Class name="~.*Constants"/>
        <Bug pattern="CT_CONSTRUCTOR_THROW"/>
    </Match>
    
    <!-- Exclude redundant null checks - these are defensive coding practices -->
    <!-- Extra null checks provide safety against future code changes and external dependencies -->
    <Match>
        <Bug pattern="RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"/>
    </Match>
    
    <!-- Exclude style warnings for intentional design choices -->
    <!-- These patterns are acceptable in our codebase:
         - Void methods may be used for future extension points
         - Cast operations are validated by context
         - Integer operations are acceptable for our use cases -->
    <Match>
        <Or>
            <Bug pattern="UC_USELESS_VOID_METHOD"/>
            <Bug pattern="BC_UNCONFIRMED_CAST_OF_RETURN_VALUE"/>
            <Bug pattern="ICAST_INTEGER_MULTIPLY_CAST_TO_LONG"/>
        </Or>
    </Match>
    
    <!-- Exclude serialization warnings for configuration cache compatible objects -->
    <!-- These objects are designed to work with Gradle's configuration cache which has specific serialization requirements -->
    <Match>
        <Bug pattern="SE_TRANSIENT_FIELD_NOT_RESTORED"/>
    </Match>
    
    <!-- Exclude mutable collection warnings for intentional caches and configuration objects -->
    <!-- These collections are intentionally mutable for performance (thread-safe caches and configuration objects) -->
    <Match>
        <Or>
            <Class name="com.guidedbyte.openapi.modelgen.logging.SLF4JPatternFormatter"/>
            <Class name="com.guidedbyte.openapi.modelgen.services.TemplateCacheManager"/>
            <Class name="com.guidedbyte.openapi.modelgen.services.TemplateSourceDiscovery"/>
        </Or>
        <Bug pattern="MS_MUTABLE_COLLECTION_PKGPROTECT"/>
    </Match>
    
    <!-- Exclude overridable method in constructor - legitimate pattern for service classes -->
    <!-- Service initialization patterns may require method calls that could theoretically be overridden -->
    <Match>
        <Bug pattern="MC_OVERRIDABLE_METHOD_CALL_IN_CONSTRUCTOR"/>
    </Match>

    <!-- Exclude MS_EXPOSE_REP for singleton pattern implementation -->
    <!-- The PluginState class implements the standard singleton pattern where getInstance() intentionally
         returns a reference to the single instance. This is the correct implementation for a singleton,
         and returning a copy would break the singleton pattern's purpose. -->
    <Match>
        <Class name="com.guidedbyte.openapi.modelgen.util.PluginState"/>
        <Method name="getInstance"/>
        <Bug pattern="MS_EXPOSE_REP"/>
    </Match>
</FindBugsFilter>